defmodule BrocaTest do
  use ExUnit.Case

  doctest Broca
  doctest Broca.Naive.NN
  doctest Broca.Nif.NN
  doctest Broca.Random

  doctest Broca.Layers
  doctest Broca.Optimizers

  test "affine test" do
    affine = [:affine, [weight: [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]], bias: [0.9, 0.6, 0.3]]]

    expected = {
      [[1.01318975, 0.7319690169999999, 0.450748284]],
      [x: [[-0.12690894, 0.31470161]], original_shape: [1, 2]]
    }

    assert Broca.Layers.forward([[-0.12690894, 0.31470161]], affine) == expected
  end

  test "relu forward" do
    assert Broca.Layers.forward([[-1.0, 2.0, 3.0, -4.0]], :relu) ==
             {[[0.0, 2.0, 3.0, 0.0]], [mask: [[0.0, 1.0, 1.0, 0.0]]]}
  end

  test "softmax forward" do
    x = [[0.3, 2.9, 4.0]]

    assert Broca.Layers.forward(x, :softmax) ==
             {
               [[0.01821127329554753, 0.24519181293507392, 0.7365969137693786]],
               [out: [[0.01821127329554753, 0.24519181293507392, 0.7365969137693786]]]
             }
  end

  test "conv2d forward1" do
    input = [
      [
        [
          [1.0, 2.0, 3.0, 4.0, 5.0],
          [6.0, 7.0, 8.0, 9.0, 10.0],
          [11.0, 12.0, 13.0, 14.0, 15.0],
          [16.0, 17.0, 18.0, 19.0, 20.0],
          [21.0, 22.0, 23.0, 24.0, 25.0]
        ]
      ],
      [
        [
          [26.0, 27.0, 28.0, 29.0, 30.0],
          [31.0, 32.0, 33.0, 34.0, 35.0],
          [36.0, 37.0, 38.0, 39.0, 40.0],
          [41.0, 42.0, 43.0, 44.0, 45.0],
          [46.0, 47.0, 48.0, 49.0, 50.0]
        ]
      ]
    ]

    conv = [
      :conv2d,
      [
        weight: [
          [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
          [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]
        ],
        bias: [0.0, 0.0]
      ],
      [filter_height: 3, filter_width: 3, input_channel_size: 1, stride: 1, padding: 0]
    ]

    assert Broca.Layers.forward(input, conv) ==
             {[
                [
                  [[63.0, 72.0, 81.0], [108.0, 117.0, 126.0], [153.0, 162.0, 171.0]],
                  [[126.0, 144.0, 162.0], [216.0, 234.0, 252.0], [306.0, 324.0, 342.0]]
                ],
                [
                  [[288.0, 297.0, 306.0], [333.0, 342.0, 351.0], [378.0, 387.0, 396.0]],
                  [[576.0, 594.0, 612.0], [666.0, 684.0, 702.0], [756.0, 774.0, 792.0]]
                ]
              ],
              [
                col: [
                  [1.0, 2.0, 3.0, 6.0, 7.0, 8.0, 11.0, 12.0, 13.0],
                  [2.0, 3.0, 4.0, 7.0, 8.0, 9.0, 12.0, 13.0, 14.0],
                  [3.0, 4.0, 5.0, 8.0, 9.0, 10.0, 13.0, 14.0, 15.0],
                  [6.0, 7.0, 8.0, 11.0, 12.0, 13.0, 16.0, 17.0, 18.0],
                  [7.0, 8.0, 9.0, 12.0, 13.0, 14.0, 17.0, 18.0, 19.0],
                  [8.0, 9.0, 10.0, 13.0, 14.0, 15.0, 18.0, 19.0, 20.0],
                  [11.0, 12.0, 13.0, 16.0, 17.0, 18.0, 21.0, 22.0, 23.0],
                  [12.0, 13.0, 14.0, 17.0, 18.0, 19.0, 22.0, 23.0, 24.0],
                  [13.0, 14.0, 15.0, 18.0, 19.0, 20.0, 23.0, 24.0, 25.0],
                  [26.0, 27.0, 28.0, 31.0, 32.0, 33.0, 36.0, 37.0, 38.0],
                  [27.0, 28.0, 29.0, 32.0, 33.0, 34.0, 37.0, 38.0, 39.0],
                  [28.0, 29.0, 30.0, 33.0, 34.0, 35.0, 38.0, 39.0, 40.0],
                  [31.0, 32.0, 33.0, 36.0, 37.0, 38.0, 41.0, 42.0, 43.0],
                  [32.0, 33.0, 34.0, 37.0, 38.0, 39.0, 42.0, 43.0, 44.0],
                  [33.0, 34.0, 35.0, 38.0, 39.0, 40.0, 43.0, 44.0, 45.0],
                  [36.0, 37.0, 38.0, 41.0, 42.0, 43.0, 46.0, 47.0, 48.0],
                  [37.0, 38.0, 39.0, 42.0, 43.0, 44.0, 47.0, 48.0, 49.0],
                  [38.0, 39.0, 40.0, 43.0, 44.0, 45.0, 48.0, 49.0, 50.0]
                ]
              ]}
  end

  test "conv2d forward2" do
    input = [
      [
        [
          [0.0, 1.0, 2.0, 3.0],
          [4.0, 5.0, 6.0, 7.0],
          [8.0, 9.0, 10.0, 11.0],
          [12.0, 13.0, 14.0, 15.0]
        ],
        [
          [16.0, 17.0, 18.0, 19.0],
          [20.0, 21.0, 22.0, 23.0],
          [24.0, 25.0, 26.0, 27.0],
          [28.0, 29.0, 30.0, 31.0]
        ]
      ],
      [
        [
          [32.0, 33.0, 34.0, 35.0],
          [36.0, 37.0, 38.0, 39.0],
          [40.0, 41.0, 42.0, 43.0],
          [44.0, 45.0, 46.0, 47.0]
        ],
        [
          [48.0, 49.0, 50.0, 51.0],
          [52.0, 53.0, 54.0, 55.0],
          [56.0, 57.0, 58.0, 59.0],
          [60.0, 61.0, 62.0, 63.0]
        ]
      ]
    ]

    conv = [
      :conv2d,
      [
        weight: [
          [
            0.0,
            1.0,
            2.0,
            3.0,
            4.0,
            5.0,
            6.0,
            7.0,
            8.0,
            9.0,
            10.0,
            11.0,
            12.0,
            13.0,
            14.0,
            15.0,
            16.0,
            17.0
          ],
          [
            18.0,
            19.0,
            20.0,
            21.0,
            22.0,
            23.0,
            24.0,
            25.0,
            26.0,
            27.0,
            28.0,
            29.0,
            30.0,
            31.0,
            32.0,
            33.0,
            34.0,
            35.0
          ],
          [
            36.0,
            37.0,
            38.0,
            39.0,
            40.0,
            41.0,
            42.0,
            43.0,
            44.0,
            45.0,
            46.0,
            47.0,
            48.0,
            49.0,
            50.0,
            51.0,
            52.0,
            53.0
          ]
        ],
        bias: [1.0, 2.0, 3.0]
      ],
      [filter_height: 3, filter_width: 3, stride: 1, padding: 0, input_channel_size: 2]
    ]

    assert Broca.Layers.forward(input, conv) ==
             {[
                [
                  [[2794.0, 2947.0], [3406.0, 3559.0]],
                  [[7007.0, 7484.0], [8915.0, 9392.0]],
                  [[11220.0, 12021.0], [14424.0, 15225.0]]
                ],
                [
                  [[7690.0, 7843.0], [8302.0, 8455.0]],
                  [[22271.0, 22748.0], [24179.0, 24656.0]],
                  [[36852.0, 37653.0], [40056.0, 40857.0]]
                ]
              ],
              [
                col: [
                  [
                    0.0,
                    1.0,
                    2.0,
                    4.0,
                    5.0,
                    6.0,
                    8.0,
                    9.0,
                    10.0,
                    16.0,
                    17.0,
                    18.0,
                    20.0,
                    21.0,
                    22.0,
                    24.0,
                    25.0,
                    26.0
                  ],
                  [
                    1.0,
                    2.0,
                    3.0,
                    5.0,
                    6.0,
                    7.0,
                    9.0,
                    10.0,
                    11.0,
                    17.0,
                    18.0,
                    19.0,
                    21.0,
                    22.0,
                    23.0,
                    25.0,
                    26.0,
                    27.0
                  ],
                  [
                    4.0,
                    5.0,
                    6.0,
                    8.0,
                    9.0,
                    10.0,
                    12.0,
                    13.0,
                    14.0,
                    20.0,
                    21.0,
                    22.0,
                    24.0,
                    25.0,
                    26.0,
                    28.0,
                    29.0,
                    30.0
                  ],
                  [
                    5.0,
                    6.0,
                    7.0,
                    9.0,
                    10.0,
                    11.0,
                    13.0,
                    14.0,
                    15.0,
                    21.0,
                    22.0,
                    23.0,
                    25.0,
                    26.0,
                    27.0,
                    29.0,
                    30.0,
                    31.0
                  ],
                  [
                    32.0,
                    33.0,
                    34.0,
                    36.0,
                    37.0,
                    38.0,
                    40.0,
                    41.0,
                    42.0,
                    48.0,
                    49.0,
                    50.0,
                    52.0,
                    53.0,
                    54.0,
                    56.0,
                    57.0,
                    58.0
                  ],
                  [
                    33.0,
                    34.0,
                    35.0,
                    37.0,
                    38.0,
                    39.0,
                    41.0,
                    42.0,
                    43.0,
                    49.0,
                    50.0,
                    51.0,
                    53.0,
                    54.0,
                    55.0,
                    57.0,
                    58.0,
                    59.0
                  ],
                  [
                    36.0,
                    37.0,
                    38.0,
                    40.0,
                    41.0,
                    42.0,
                    44.0,
                    45.0,
                    46.0,
                    52.0,
                    53.0,
                    54.0,
                    56.0,
                    57.0,
                    58.0,
                    60.0,
                    61.0,
                    62.0
                  ],
                  [
                    37.0,
                    38.0,
                    39.0,
                    41.0,
                    42.0,
                    43.0,
                    45.0,
                    46.0,
                    47.0,
                    53.0,
                    54.0,
                    55.0,
                    57.0,
                    58.0,
                    59.0,
                    61.0,
                    62.0,
                    63.0
                  ]
                ]
              ]}
  end

  test "MaxPooling2D forward" do
    input = [
      [
        [[63.0, 72.0, 81.0], [108.0, 117.0, 126.0], [153.0, 162.0, 171.0]],
        [[126.0, 144.0, 162.0], [216.0, 234.0, 252.0], [306.0, 324.0, 342.0]]
      ],
      [
        [[288.0, 297.0, 306.0], [333.0, 342.0, 351.0], [378.0, 387.0, 396.0]],
        [[576.0, 594.0, 612.0], [666.0, 684.0, 702.0], [756.0, 774.0, 792.0]]
      ]
    ]

    pooling = [:max_pooling2d, [pool_height: 2, pool_width: 2, stride: 1, padding: 0]]

    assert Broca.Layers.forward(input, pooling) ==
             {[
                [[[117.0, 126.0], [162.0, 171.0]], [[234.0, 252.0], [324.0, 342.0]]],
                [[[342.0, 351.0], [387.0, 396.0]], [[684.0, 702.0], [774.0, 792.0]]]
              ],
              [
                mask: [[[[3, 3], [3, 3]], [[3, 3], [3, 3]]], [[[3, 3], [3, 3]], [[3, 3], [3, 3]]]],
                original_height: 3,
                original_width: 3
              ]}
  end

  test "Affine backward" do
    dout = [[0.84029972, 0.22303644, 0.19933264]]

    affine = [
      :affine,
      [
        weight: [[0.4176742, 2.3945292, -0.36417824], [0.35595952, 0.31028157, -0.84189487]],
        bias: [0.55537918, -0.1362438, -1.3922125]
      ],
      [x: [[0.96726788, 0.09582064]], original_shape: [1, 2]]
    ]

    assert Broca.Layers.backward(dout, affine) ==
             {
               [[0.8124461715455185, 0.20049965471818834]],
               [
                 weight: [
                   [0.8127949287289935, 0.21573598448154718, 0.1928080601076032],
                   [0.0805180569622208, 0.0213714944241216, 0.0191001811376896]
                 ],
                 bias: [0.84029972, 0.22303644, 0.19933264]
               ]
             }
  end

  # test "Conv2D backward" do
  #   dout = [
  #     [[[0.0, 0.01], [0.02, 0.03]], [[0.04, 0.05], [0.06, 0.07]], [[0.08, 0.09], [0.1, 0.11]]],
  #     [[[0.12, 0.13], [0.14, 0.15]], [[0.16, 0.17], [0.18, 0.19]], [[0.2, 0.21], [0.22, 0.23]]]
  #   ]

  #   conv = [
  #     :conv2d,
  #     [
  #       weight: [
  #         [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17],
  #         [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35],
  #         [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53]
  #       ],
  #       bias: [1, 2, 3]
  #     ],
  #     [filter_height: 3, filter_width: 3, input_channel_size: 2, stride: 1, padding: 0],
  #     [
  #       col: [
  #         [
  #           [
  #             [0, 1, 2, 4, 5, 6, 8, 9, 10, 16, 17, 18, 20, 21, 22, 24, 25, 26],
  #             [1, 2, 3, 5, 6, 7, 9, 10, 11, 17, 18, 19, 21, 22, 23, 25, 26, 27]
  #           ],
  #           [
  #             [4, 5, 6, 8, 9, 10, 12, 13, 14, 20, 21, 22, 24, 25, 26, 28, 29, 30],
  #             [5, 6, 7, 9, 10, 11, 13, 14, 15, 21, 22, 23, 25, 26, 27, 29, 30, 31]
  #           ]
  #         ],
  #         [
  #           [
  #             [32, 33, 34, 36, 37, 38, 40, 41, 42, 48, 49, 50, 52, 53, 54, 56, 57, 58],
  #             [33, 34, 35, 37, 38, 39, 41, 42, 43, 49, 50, 51, 53, 54, 55, 57, 58, 59]
  #           ],
  #           [
  #             [36, 37, 38, 40, 41, 42, 44, 45, 46, 52, 53, 54, 56, 57, 58, 60, 61, 62],
  #             [37, 38, 39, 41, 42, 43, 45, 46, 47, 53, 54, 55, 57, 58, 59, 61, 62, 63]
  #           ]
  #         ]
  #       ]
  #     ]
  #   ]

  #   Broca.Layers.backward(dout, conv) ==
  #     {[
  #        [
  #          [
  #            [3.5999999999999996, 7.859999999999999, 8.13, 4.4399999999999995],
  #            [8.64, 18.75, 19.41, 10.53],
  #            [9.540000000000001, 20.729999999999997, 21.39, 11.61],
  #            [5.76, 12.42, 12.810000000000002, 6.9]
  #          ],
  #          [
  #            [4.68, 10.29, 10.559999999999999, 5.79],
  #            [11.34, 24.69, 25.349999999999998, 13.770000000000001],
  #            [12.24, 26.67, 27.330000000000002, 14.85],
  #            [7.380000000000001, 15.93, 16.32, 8.79]
  #          ]
  #        ],
  #        [
  #          [
  #            [10.08, 21.18, 22.17, 11.64],
  #            [22.68, 47.550000000000004, 49.65, 26.009999999999998],
  #            [25.740000000000002, 53.85000000000001, 55.95, 29.25],
  #            [14.4, 30.060000000000002, 31.17, 16.26]
  #          ],
  #          [
  #            [14.4, 30.09, 31.080000000000002, 16.23],
  #            [31.86, 66.44999999999999, 68.55, 35.730000000000004],
  #            [34.92, 72.75, 74.85000000000001, 38.97],
  #            [19.259999999999998, 40.05, 41.16, 21.39]
  #          ]
  #        ]
  #      ],
  #      [
  #        weight: [
  #          [
  #            18.959999999999997,
  #            19.56,
  #            20.159999999999997,
  #            21.360000000000003,
  #            21.959999999999997,
  #            22.560000000000002,
  #            23.759999999999998,
  #            24.36,
  #            24.959999999999997,
  #            28.56,
  #            29.159999999999997,
  #            29.759999999999998,
  #            30.960000000000004,
  #            31.56,
  #            32.16,
  #            33.36,
  #            33.96,
  #            34.56
  #          ],
  #          [
  #            24.880000000000003,
  #            25.799999999999997,
  #            26.72,
  #            28.56,
  #            29.480000000000004,
  #            30.400000000000002,
  #            32.24,
  #            33.16,
  #            34.080000000000005,
  #            39.599999999999994,
  #            40.52,
  #            41.440000000000005,
  #            43.279999999999994,
  #            44.2,
  #            45.120000000000005,
  #            46.96000000000001,
  #            47.88,
  #            48.800000000000004
  #          ],
  #          [
  #            30.799999999999997,
  #            32.040000000000006,
  #            33.279999999999994,
  #            35.760000000000005,
  #            37.0,
  #            38.24,
  #            40.72,
  #            41.96,
  #            43.2,
  #            50.64,
  #            51.879999999999995,
  #            53.120000000000005,
  #            55.6,
  #            56.84,
  #            58.08,
  #            60.56,
  #            61.8,
  #            63.040000000000006
  #          ]
  #        ],
  #        bias: [0.6000000000000001, 0.9199999999999999, 1.2400000000000002]
  #      ]}
  # end

  # test "Conv2D backward multichannel" do
  #   dout = [
  #     [
  #       [
  #         [0.31, 0.51, 0.59, 0.61],
  #         [0.52, 0.55, 0.03, 0.34],
  #         [0.06, 0.05, 0.16, 0.11],
  #         [0.14, 0.28, 0.44, 0.57]
  #       ],
  #       [
  #         [0.17, 0.1, 0.63, 0.48],
  #         [0.45, 0.22, 0.33, 0.6],
  #         [0.5, 0.56, 0.19, 0.54],
  #         [0.62, 0.04, 0.32, 0.38]
  #       ]
  #     ],
  #     [
  #       [
  #         [0.12, 0.21, 0.49, 0.37],
  #         [0.53, 0.43, 0.13, 0.01],
  #         [0.15, 0.2, 0.35, 0.46],
  #         [0.26, 0.24, 0.23, 0.41]
  #       ],
  #       [
  #         [0.25, 0.42, 0.36, 0.18],
  #         [0.39, 0.27, 0.47, 0.0],
  #         [0.08, 0.07, 0.3, 0.09],
  #         [0.02, 0.58, 0.29, 0.4]
  #       ]
  #     ]
  #   ]

  #   conv = [
  #     :conv2d,
  #     [weight: [[1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2, 2, 2]], bias: [0, 0]],
  #     [filter_height: 2, filter_width: 2, padding: 1, input_channel_size: 2],
  #     [
  #       col: [
  #         [
  #           [
  #             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09],
  #             [0.0, 0.0, 0.0, 0.01, 0.0, 0.0, 0.09, 0.1],
  #             [0.0, 0.0, 0.01, 0.02, 0.0, 0.0, 0.1, 0.11],
  #             [0.0, 0.0, 0.02, 0.0, 0.0, 0.0, 0.11, 0.0]
  #           ],
  #           [
  #             [0.0, 0.0, 0.0, 0.03, 0.0, 0.09, 0.0, 0.12],
  #             [0.0, 0.01, 0.03, 0.04, 0.09, 0.1, 0.12, 0.13],
  #             [0.01, 0.02, 0.04, 0.05, 0.1, 0.11, 0.13, 0.14],
  #             [0.02, 0.0, 0.05, 0.0, 0.11, 0.0, 0.14, 0.0]
  #           ],
  #           [
  #             [0.0, 0.03, 0.0, 0.06, 0.0, 0.12, 0.0, 0.15],
  #             [0.03, 0.04, 0.06, 0.07, 0.12, 0.13, 0.15, 0.16],
  #             [0.04, 0.05, 0.07, 0.08, 0.13, 0.14, 0.16, 0.17],
  #             [0.05, 0.0, 0.08, 0.0, 0.14, 0.0, 0.17, 0.0]
  #           ],
  #           [
  #             [0.0, 0.06, 0.0, 0.0, 0.0, 0.15, 0.0, 0.0],
  #             [0.06, 0.07, 0.0, 0.0, 0.15, 0.16, 0.0, 0.0],
  #             [0.07, 0.08, 0.0, 0.0, 0.16, 0.17, 0.0, 0.0],
  #             [0.08, 0.0, 0.0, 0.0, 0.17, 0.0, 0.0, 0.0]
  #           ]
  #         ],
  #         [
  #           [
  #             [0.0, 0.0, 0.0, 0.18, 0.0, 0.0, 0.0, 0.27],
  #             [0.0, 0.0, 0.18, 0.19, 0.0, 0.0, 0.27, 0.28],
  #             [0.0, 0.0, 0.19, 0.2, 0.0, 0.0, 0.28, 0.29],
  #             [0.0, 0.0, 0.2, 0.0, 0.0, 0.0, 0.29, 0.0]
  #           ],
  #           [
  #             [0.0, 0.18, 0.0, 0.21, 0.0, 0.27, 0.0, 0.3],
  #             [0.18, 0.19, 0.21, 0.22, 0.27, 0.28, 0.3, 0.31],
  #             [0.19, 0.2, 0.22, 0.23, 0.28, 0.29, 0.31, 0.32],
  #             [0.2, 0.0, 0.23, 0.0, 0.29, 0.0, 0.32, 0.0]
  #           ],
  #           [
  #             [0.0, 0.21, 0.0, 0.24, 0.0, 0.3, 0.0, 0.33],
  #             [0.21, 0.22, 0.24, 0.25, 0.3, 0.31, 0.33, 0.34],
  #             [0.22, 0.23, 0.25, 0.26, 0.31, 0.32, 0.34, 0.35],
  #             [0.23, 0.0, 0.26, 0.0, 0.32, 0.0, 0.35, 0.0]
  #           ],
  #           [
  #             [0.0, 0.24, 0.0, 0.0, 0.0, 0.33, 0.0, 0.0],
  #             [0.24, 0.25, 0.0, 0.0, 0.33, 0.34, 0.0, 0.0],
  #             [0.25, 0.26, 0.0, 0.0, 0.34, 0.35, 0.0, 0.0],
  #             [0.26, 0.0, 0.0, 0.0, 0.35, 0.0, 0.0, 0.0]
  #           ]
  #         ]
  #       ]
  #     ]
  #   ]

  #   Broca.Layers.backward(dout, conv) ==
  #     {
  #       [
  #         [
  #           [
  #             [3.77, 4.24, 5.65],
  #             [4.640000000000001, 3.39, 3.96],
  #             [3.9700000000000006, 3.1500000000000004, 4.14]
  #           ],
  #           [
  #             [3.77, 4.24, 5.65],
  #             [4.640000000000001, 3.39, 3.96],
  #             [3.9700000000000006, 3.1500000000000004, 4.14]
  #           ]
  #         ],
  #         [
  #           [
  #             [3.95, 4.299999999999999, 3.02],
  #             [2.93, 3.33, 2.67],
  #             [2.3499999999999996, 3.5, 3.6100000000000003]
  #           ],
  #           [
  #             [3.95, 4.299999999999999, 3.02],
  #             [2.93, 3.33, 2.67],
  #             [2.3499999999999996, 3.5, 3.6100000000000003]
  #           ]
  #         ]
  #       ],
  #       [
  #         weight: [
  #           [
  #             0.6643,
  #             0.6224000000000001,
  #             0.6569999999999999,
  #             0.6482,
  #             1.1134,
  #             1.0499,
  #             1.161,
  #             1.1333000000000002
  #           ],
  #           [0.6769, 0.6631999999999999, 0.6111, 0.6977, 1.1854, 1.1762, 1.134, 1.2161]
  #         ],
  #         bias: [9.86, 10.299999999999999]
  #       ]
  #     }
  # end
end
